一、笔试题
六道题只会选其中三道题
A卷

1、简要说明数据库查询哪些情况不会走索引

对索引列进行了函数操作
违法最左前缀法则
以%开头的Like模糊查询
查询条件中的列没有被包含在任何索引中
使用"NOT"操作符进行条件筛选时，数据库可能无法使用索引


2、简要说明 ArrayList和LinkedList的区别

ArrayList是基于数组实现的动态数组，而LinkedList是基于链表实现的双向链表
ArrayList可以通过索引快速访问元素，时间复杂度为O(1)，而LinkedList需要从头节点开始遍历链表，时间复杂度为O(n)，
ArrayList在尾部插入和删除元素效率较高，时间复杂度为O(1)，因为不需要移动其他元素。但在中间插入和删除元素时，时间复杂度为O(n)
LinkedList在任意位置插入和删除元素的时间复杂度都是O(1)


3、假设业务有一个导出的功能，需要导出5个文件，涉及多张表的数据处理，并且数据量较大、处理逻辑相对复杂，在考虑性能和用户体验的前提下，结合你的经验和知识如何设计
该功能?

异步处理：考虑到数据量较大和处理逻辑相对复杂，可以选择使用异步处理方式。当用户点击导出按钮时，后台启动异步任务来处理数据，并提供一个可下载的链接或通知用户导出完成。这样可以避免用户等待过长的时间或请求超时。
分批处理：针对数据量较大的情况，可以将数据划分为多个批次进行处理，而不是一次性加载和处理所有数据。每个批次可以分别处理一部分数据，并生成部分导出文件。通过这种方式，可以控制内存使用和避免长时间的处理操作。
缓存数据：如果导出的数据比较稳定，可以考虑将数据缓存在内存或其他缓存中，以减少对数据库的频繁访问。这样可以提高导出的性能和响应速度。


B卷
1、简单分析Java语言中的final、finally、finalize三者的区别。

final用于修饰类、方法和变量，表示不可改变或不可继承。
finally用在try-catch语句块中，用于定义无论是否发生异常都会被执行的代码块。
finalize是Object类的方法，在对象被垃圾回收前进行资源清理。


2、简单说明ArrayList、Vector、LinkedList的存储性能和特性，HashMap和Hashtable的区别。

ArrayList 和 Vector 最适合频繁随机访问元素，动态数组作为其内部数据结构。
LinkedList 最适合需要大量插入和删除元素的操作。
Vector 由于有同步机制,性能略低,但能保证线程安全。
ArrayList 和 LinkedList 两个不是线程安全的。

线程安全性：Hashtable是线程安全的，而HashMap则不是线程安全的。如果需要在多线程环境下使用Map，建议使用ConcurrentHashMap。
null值：HashMap允许key和value为null，而Hashtable不允许。如果尝试将null值作为key或value传递给Hashtable，会抛出NullPointerException。


3、编写一个程序，计算任意两个日期之间间隔的天数。

public class DateDifference {
  public static void main(String[] args) {
    String dateStart = "2020-01-01"; 
    String dateEnd = "2020-03-15";   
    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    long difference =   format.parse(dateEnd).getTime() - format.parse(dateStart).getTime();       
    long days = difference / (1000 * 60 * 60 * 24);        
    System.out.println(days); 
  }
}


二、技术面试
1、讲一讲同步锁

lock和synchronized

2、lambda表达式实现和使用
Java 8引入的一种新的语法形式,用于创建匿名函数，使得代码更加简洁紧凑，Lambda表达式主要用于功能式接口也就是只有一个抽象方法的接口

3、对数组、链表去重
集合 Set、遍历

4、hashset的去重实现

HashSet的去重实现主要依赖于HashMap。
我们知道HashMap的 key 是不允许重复的。HashSet 内部使用 HashMap 存储数据,但只是使用 key 来存储,不使用 value 。
因此,当我们往 HashSet 添加元素时,实质是调用 HashMap 的 put() 方法,将元素放入 HashMap 的 key 位置

5、==和equals的区别
== 是判断两个对象的标识是否相等,即判断两个变量是否指向同一个对象。
equals() 是判断两个对象的内容是否相等。对于基本类型,== 和 equals() 判断结果一致。但对于引用类型,== 判断内存地址,equals()可以判断对象内容

6、线程池的种类、创建以及核心参数和工作原理
固定线程池:FixedThreadPool适用于需要固定数量线程的场景。、缓存线程池:CachedThreadPool适用于执行短期异步任务的场景、
单一线程池:SingleThreadPool适用于只需要一个任务处理线程的场景、ScheduledThreadPool,可以调度在指定时间执行任务

使用 Executors 工厂类
自定义创建线程池ThreadPoolExecutor 

当新任务来时,线程池会优先从工作线程中选择一个空闲的线程来执行。
如果没有空闲线程,则创建一个新线程来执行任务,但 ensuring 最多不会创建超过 maximumPoolSize 最大线程数。
如果超过最大线程数,任务进入 waitQueue 等待队列。


7、Redis分布式锁的实现

Redis可以通过SET NX命令实现分布式锁，可以原子性地设置一个key,如果key不存在时才设置成功。
不同服务获取分布式锁时,设置不同的key。
值设为任意非空字符串,表示已获取该锁。
锁超时时间通过设置key的过期时间来实现。
当任务完成后,删除key,释放锁。


8、nginx的使用

反向代理、负载均衡和web缓存服务器
通过server{}块来配置
Nginx 可以代理转发客户端的请求,将请求转发给后端对应的服务处理。实现负载均衡、动静分离等功能。
Nginx可以缓存静态资源如图像、CSS、JS文件,减轻后端服务压力。
Nginx支持多种负载均衡算法,实现后端服务的负载均衡、轮询权重ip。

9、Redis分布式集群的搭建
Redis 分布式集群主要通过主从复制和哨兵模式来实现
设置多个哨兵进程,监控主服务器是否故障
搭建哨兵:
配置 sentinel.conf 指定:

10、什么是多态

11、常用集合的底层结构

12、项目业务流程以及使用的技术，该技术怎么用的？


13、项目中遇到过的难点问题，你是怎么解决的？

问题:响应时间太长,不满足性能要求
解决方案:
SQL优化 - 加索引
代码优化 - 减少循环、Sql查询等
使用缓存 - Ehcache/Redis
优化数据传输 - Json序列化,压缩传输

14、redis主要用在哪些地方


​15、你们的redis高可用怎么做的


​16、对ES有了解吗
ES是一个分布式的开源全文搜索引擎、ES提供Restful API,可以使用JSON进行交互
ES拥有分词、搜索高亮显示、倒排索引,关键字作为索引,文档位置作为倒排列表
ES支持根据字段进行过滤、聚合和排序等搜索操作

​17、kafka有了解过吗
日志收集、实时ETL、消息系统、事件驱动架构等

​18、如何解决消息堆积
提高消费者消费能力
设置消息过期时间
消费进度持久化，惰性队列

​19、如何进行sql优化，什么情况下会造成索引失效
​20、描述一下Bean的生命周期
实例化、设置属性给Bean属性设置值和引用、初始化 调用 @PostConstruct 注解标注的方法、添加到相应的作用域中、回收销毁 bean
​21、有做过jvm优化吗？可以谈谈你对jvm的了解吗

类加载器（ClassLoader）把Java代码转换为字节码
运行时数据区（Runtime Data Area）把字节码加载到内存中，而字节码文件只是JVM的一套指令集规范，并不能直接交给底层系统去执行，而是有执行引
擎运行
执行引擎（Execution Engine）将字节码翻译为底层系统指令，再交由CPU执行去执行，此时需要调用其他语言的本地库接口（Native Method Library）来
实现整个程序的功能。
堆、方法区（常量、静态变量）、栈、本地方法栈、程序计数器（当前线程所执行的字节码的行数）

​22、对电商项目有经验吗，如果让你设计一个电商项目，你会设计哪些模块，会用到什么表
用户管理:用户表
商品管理:商品表（商品id、参数、库存）、属性表（属性、属性值、规格）
订单管理：订单表（用户id、总金额、订单状态）、订单明细表（商品id、价钱、数量）
物流跟踪：物流表（商品id、物流公司、单号、状态）
支付（支付类型、支付状态、订单ID）
评价（评分、评论）

​23、你现在还在职吗
​24、方便说一下为什么离职吗
​25、你觉得你和同事的能力有差距吗
​26、平时有自学什么吗，举个例子
​27、对后面的发展你是怎么做规划的
​28、有什么问题要问我们的吗
29、大数据下的查询 分布式事务怎么从业务上面解决

2PC(两步提交)
第一步:提交准备(Prepare)阶段。所有资源锁定,但未提交。
第二步:提交(Commit)或回滚(Rollback)。所有资源一起提交或回滚。
需要全局协调者,存在单点问题。

3PC(三步提交)
第一步:提交请求阶段。请求全局提交。
第二步:如果得不到大多数资源的投票直接回滚。
第三步:正式提交或回滚。
解决2PC的单点问题,但性能下降。

TCC(Try/Confirm/Cancel)
第一步:执行事务的Try阶段。向各个资源发起请求并记录执行结果。
第二步:Confirm阶段。如果Try都成功会调用Confirm正式提交事务。
第三步:Cancel阶段。如果Try失败会回滚事务。
无需全局协调者,可以做到最终一致


30、mq消息丢失和延时队列的实现 
持久化、发布者确认和回执机制、消费者确认机制、失败重试
使用插件、 TTL属性和死信交换机

31、transcation注解的底层实现
Spring事务的注解实现主要通过AOP来实现的。

@Transactional 注解被应用到需要事务的方法上。
Spring会自动扫描这些注解。
Spring会为这些有 @Transactional 注解方法创建一个事务代理。
当方法被执行时,事务代理先开始一个事务。
执行方法本身。
根据 @Transactional 是否rollbak,决定是否提交事务。
返回结果。


主观题：
1、对自己做一个总结，性格、未来规划。
参考：讲一讲自己的优势，如：沟通能力、工作态度、对多年测试经验的总结。近期在学习xxx,未来发展方向等。
2、你对上海玖盈的了解?
参考：贵司主要分为两块业务：电商业务和酒店业务。
电商业务依托招商银行2大亿级APP“掌上生活APP”和“招商银行APP”，聚焦互联网生活场景经营，提供优质电商服务，是行业内最好的银行电商平台。
酒店业务：频道专注为招商银行持卡客户提供高品质的酒店礼遇。甄选知名品牌亲子酒店，为不同年龄阶段儿童、不同亲子家庭出行需求定制了多样化酒店产品套餐及亲子礼遇。

三、终面（领导面）：
1、离职原因
2、你觉得软件开发工程师的理解
编程能力  解决问题能力 代码规范  团队协作精神 
3、一天工作的安排
Bug修复 开发任务 设计和修改代码   写文档  参与会议、日常沟通和技术分享
4、平常怎么系统学习软件开发的相关知识
5、优点和缺点
6、职业生涯规划